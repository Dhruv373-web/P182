From react:
○ React, Component
Form react-native:
○ Image, View
StyleSheet:
● Upper Container: App Name
● Middle Container: Camera Section
● Lower container: Action Section
{
face: {
bounds: {
size: { width: faceWidth, height: faceHeight }
},
leftEyePosition,
rightEyePosition,
noseBasePosition
}
From react:
○ React, Component
● Form react-native:
○ StyleSheet, Text, View, SafeAreaView, Platform, Image, ScrollView,
TouchableOpacity
● From expo-camera:
○ Camera
● From expo-face-detector:
FaceDetector
● From expo-status-bar:
○ StatusBar
hasCameraPermission: null,
faces: []
   componentDidMount() {
        Permissions
            .askAsync(Permissions.CAMERA)
            .then(this.onCameraPermission)
    }   
onFacesDetected({ faces }) {
        this.setState({ faces: faces })
    }

    onFaceDetectionError(error) {
        console.log(error)
    }
render() {
        const { hasCameraPermission } = this.state;
        if (hasCameraPermission === null) {
            return <View />
        }
        if (hasCameraPermission === false) {
            return (
                <View style={styles.container}>
                    <Text>No access to camera</Text>
                </View>
            )
        }
        return (
            <View style={styles.container}>
                <SafeAreaView style={styles.droidSafeArea} />
                <View style={styles.headingContainer}>
                    <Text style={styles.titleText}>FRAPP</Text>
                </View>
                <View style={styles.cameraStyle}>
                    <Camera
                        style={{ flex: 1 }}
                        type={Camera.Constants.Type.front}
                        faceDetectorSettings={{
                            mode: FaceDetector.Constants.Mode.fast,
                            detectLandmarks: FaceDetector.Constants.Landmarks.all,
                            runClassifications: FaceDetector.Constants.Classifications.all
                        }}
                        onFacesDetected={this.onFacesDetected}
                        onFacesDetectionError={this.onFacesDetectionError}
                    />
                    {
                        this.state.faces.map(face => {
                            return <Filter1 key={face.faceID} face={face} />
                        })
                    }
                </View>
            </View>
        )
    }
}
